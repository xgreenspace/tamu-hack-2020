{"version":3,"sources":["Landing.js","BSLink.js","App.js","serviceWorker.js","index.js"],"names":["Landing","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","console","log","state","axios","post","then","response","catch","error","email","phone","this","Jumbotron","className","onSubmit","type","placeholder","onChange","Component","BSLink","rel","href","integrity","crossorigin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sRAOaA,EAAb,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,cAAgB,SAACC,GACb,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAV1B,EAanBC,cAAgB,SAAAL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IAAMC,KAAK,6CAA8C,EAAKF,OACzDG,MAAK,SAAAC,GACFN,QAAQC,IAAIK,MAEfC,OAAM,SAAAC,GACHR,QAAQC,IAAIO,OAlBpB,EAAKN,MAAQ,CACTO,MAAO,GACPC,MAAO,IALI,EAFvB,qDA2Bc,IAAD,EACoBC,KAAKT,MAAtBO,EADH,EACGA,MAAOC,EADV,EACUA,MACf,OACI,6BACI,kBAACE,EAAA,EAAD,KACI,wBAAIC,UAAU,aAAd,mBACA,wBAAIA,UAAU,SACd,0BAAMC,SAAUH,KAAKb,eACjB,6BACI,2BACIiB,KAAK,OACLC,YAAY,SACZpB,KAAK,QACLC,MAAOY,EACPQ,SAAUN,KAAKnB,iBAGvB,6BACI,2BAAOuB,KAAK,OACRC,YAAY,eACZpB,KAAK,QACLC,MAAOa,EACPO,SAAUN,KAAKnB,iBAGvB,4BAAQuB,KAAK,UAAb,iBApDxB,GAA6BG,aCFhBC,EAAb,uKAEQ,OACI,0BAAMC,IAAI,aAAYC,KAAK,wEAC3BC,UAAU,0EACVC,YAAY,kBALxB,GAA4BL,aCSbM,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMgC,a","file":"static/js/main.9a5f3f2f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport { Jumbotron, Button, Form } from 'react-bootstrap';\r\nimport axios from 'axios'\r\n\r\n// Currently setup to be the navbar\r\n\r\nexport class Landing extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    changeHandler = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        axios.post('https://jsonplaceholder.typicode.com/posts', this.state)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { email, phone } = this.state\r\n        return (\r\n            <div>\r\n                <Jumbotron>\r\n                    <h1 className=\"display-3\">Breach Detector</h1>\r\n                    <hr className=\"my-2\" />\r\n                    <form onSubmit={this.submitHandler}>\r\n                        <div>\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"E-mail\" \r\n                                name=\"email\" \r\n                                value={email} \r\n                                onChange={this.changeHandler}>\r\n                            </input>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"text\" \r\n                                placeholder=\"Phone Number\" \r\n                                name=\"phone\"\r\n                                value={phone}\r\n                                onChange={this.changeHandler}>\r\n                            </input>\r\n                        </div>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </form>\r\n                    \r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\n// Holds the Bootstrap link\r\n\r\nexport class BSLink extends Component {\r\n    render() {\r\n        return (\r\n            <link rel=\"stylesheet\"href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n            integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n            crossorigin=\"anonymous\"/>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Landing} from './Landing'\nimport {BSLink} from './BSLink'\n\nfunction App() {\n  return (\n    <div>\n      <BSLink/>\n      <Landing/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}